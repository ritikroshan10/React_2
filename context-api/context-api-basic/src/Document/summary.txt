------------first step------------
create a context

----------second step-------------
create a provider

-------------third step-----------
give the access to the context in app.jsx or main.jsx

-------------fourth step-------------
set the value in the context provider

---------fifth step------------
get the value form context provider

----------------------------------------------------------------------------------------------------------------------------------------

************ What is useContext / Context API?**********

React's Context API is a way to share data (like a global variable) between components without having to pass props manually at every level.

Normally, to pass data from a parent to child component, you do this:
<Parent>
  <Child data={something} />
</Parent>

But what if you need the same data in a deeply nested component? You'll have to pass it through every component — even if they don’t use it.

Context API solves this by letting you create a central "store" of data that any component can access directly.

Now,,,,
_______________How does it work? (3 simple steps)_______________

********Step 1: Create Context**********

import { createContext } from 'react';
const MyContext = createContext();

**********step 2: Provide Context Value***********

Wrap your components with a Provider and give it a value.

<MyContext.Provider value={"Hello World!"}>
  <MyComponent />
</MyContext.Provider>

************Step 3: Use useContext to read the value**********

Inside any component, use useContext to access the data

import { useContext } from 'react';

const MyComponent = () => {
  const value = useContext(MyContext);
  return <p>{value}</p>;  // It will show: Hello World!
};

*******Visual Summary:*********

[Provider]
   ↓ (value)
[Child] → useContext → Gets the value directly!

_______________example with object______

// Context.js
import { createContext } from 'react';

export const UserContext = createContext();


// App.js
import { UserContext } from './Context';

function App() {
  const user = { name: 'Ritik', age: 23 };

  return (
    <UserContext.Provider value={user}>
      <Profile />
    </UserContext.Provider>
  );
}

// Profile.js
import { useContext } from 'react';
import { UserContext } from './Context';

function Profile() {
  const user = useContext(UserContext);
  return <h2>Hello, {user.name}</h2>;
}


-----------------------------Real-World Use Cases------------------------
Theme (dark / light mode)

Auth user info (isLoggedIn, user details)

Language (i18n)

Global state without Redux




